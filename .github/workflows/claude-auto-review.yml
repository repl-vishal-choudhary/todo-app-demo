name: Claude Auto Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  claude-auto-review:
    # Skip draft PRs
    if: github.event.pull_request.draft == false

    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Claude PR Action
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            # PR Review for #${{ github.event.pull_request.number }}
            
            ## CRITICAL: USE ONLY INLINE COMMENTS - NO SUMMARY COMMENTS
            
            First, read the team review guidelines from `.claude/commands/team-review.md` to understand the review standards and process.

            Then follow these steps:

            ## 1. Load Review Guidelines
            Read the file `.claude/commands/team-review.md` for complete review instructions, including:
            - Reviewer persona and philosophy
            - Review priorities and what gets rejected
            - Comment format and examples
            - Technology-specific checks

            ## 2. Check Existing Comments
            Before reviewing, check what comments/suggestions already exist:
            ```bash
            gh pr view ${{ github.event.pull_request.number }} --comments
            ```
            
            ## 3. Get PR Diff
            Use `gh pr diff ${{ github.event.pull_request.number }}` to get the PR diff

            ## 4. Apply Review Process
            Follow the comprehensive review process defined in team-review.md, focusing on:
            - MANDATORY FIXES (breaking changes, security holes, performance killers,React violations, TypeScript issues, accessibility)
            - CODE QUALITY issues (naming, patterns, dead code)

            ## 5. Create ONLY Inline Review Comments (NO SUMMARY):
            
            **FORBIDDEN COMMANDS - DO NOT USE:**
            - ❌ NEVER use: `gh pr comment` (creates summary comments)
            - ❌ NEVER use: `gh pr review --comment` (creates summary)
            - ❌ NEVER post a general review summary
            
            **REQUIRED: Use ONLY inline comments at specific lines:**
            
            ### Step 1: Discover the correct API endpoints dynamically
            ```bash
            # Method A: Get from PR metadata
            PR_DATA=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }})
            
            # Extract the reviews URL from the PR data
            REVIEWS_URL=$(echo "$PR_DATA" | jq -r '._links.reviews.href' | sed 's|https://api.github.com||')
            
            # Extract the comments URL from the PR data  
            COMMENTS_URL=$(echo "$PR_DATA" | jq -r '._links.comments.href' | sed 's|https://api.github.com||')
            
            # Method B: If _links not available, construct from pattern
            if [ -z "$REVIEWS_URL" ]; then
              REVIEWS_URL="repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews"
              COMMENTS_URL="repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments"
            fi
            ```

            ### Step 2: Start a pending review
            ```bash
            # Use the discovered reviews endpoint
            REVIEW_ID=$(gh api "$REVIEWS_URL" \
              --method POST \
              --field commit_id="${{ github.event.pull_request.head.sha }}" \
              --field event="PENDING" \
              --jq '.id')
            ```

            ### Step 3: Add inline comments at specific lines
            For each issue found in the code, add an inline comment with a suggestion:
            ```bash
            # IMPORTANT: The body MUST use proper markdown with triple backticks for suggestions
            # Example body format that GitHub will recognize:
            BODY="**ISSUE:** Using any type
            **IMPACT:** Loses type safety
            **FIX:**
            \`\`\`suggestion
            todos: Todo[]  // This exact line will replace the original
            \`\`\`
            **WHY:** Proper typing prevents runtime errors"
            
            # Use the discovered comments endpoint
            gh api "$COMMENTS_URL" \
              --method POST \
              --field commit_id="${{ github.event.pull_request.head.sha }}" \
              --field path="<file_path_from_diff>" \
              --field line=<line_number_from_diff> \
              --field side="RIGHT" \
              --field body="$BODY"
            ```
            
            **CRITICAL for suggestions to work:**
            - Use real newlines in the body (not \n)
            - Use triple backticks: \`\`\`suggestion
            - The suggested code must be the EXACT replacement for that line
            - Close with triple backticks: \`\`\`

            ### Step 4: Submit the review (comments only, no summary)
            ```bash
            # Submit the pending review with COMMENT event (not APPROVE/REQUEST_CHANGES)
            gh api "$REVIEWS_URL/${REVIEW_ID}/events" \
              --method POST \
              --field event="COMMENT"
            ```

            **REMEMBER:**
            - Create one inline comment per issue
            - Use line numbers from the diff
            - Include suggestion blocks for fixes
            - DO NOT create any summary comment
            - The line number must be from the DIFF (+/- lines), not the file line number
            - Use "side":"RIGHT" for additions, "side":"LEFT" for deletions
            - If API structure changes, the dynamic discovery will adapt

            Follow the tone and standards defined in team-review.md - be direct, provide concrete fixes, no gentle language.

          claude_args: '--allowed-tools "Bash(gh api:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(npm install),Bash(npm run lint),Bash(npm test),Bash(npm run build)"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
